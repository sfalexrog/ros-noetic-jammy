..........................................................................................................................................................................................................................................
=== ./src/class_loader (git) ===
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 7580a95..94e738e 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -3,7 +3,7 @@ project(class_loader CXX)
 
 # Default to C++14
 if(NOT CMAKE_CXX_STANDARD)
-  set(CMAKE_CXX_STANDARD 14)
+  set(CMAKE_CXX_STANDARD 17)
 endif()
 if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
   add_compile_options(-Wall -Wextra -Wpedantic)
=== ./src/diagnostics/diagnostic_common_diagnostics (git) ===
diff --git a/package.xml b/package.xml
index d8b4dfaa..80ca853d 100644
--- a/package.xml
+++ b/package.xml
@@ -18,7 +18,8 @@
   <build_depend>rostest</build_depend>
 
   <run_depend>diagnostic_updater</run_depend>
-  <run_depend>hddtemp</run_depend>
+  <!-- Ignore for jammy -->
+  <!-- <run_depend>hddtemp</run_depend> -->
   <run_depend>lm-sensors</run_depend>
   <run_depend>rospy</run_depend>
   <run_depend>tf</run_depend>
=== ./src/geometry/tf (git) ===
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 8a919682..b82c8dbb 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -7,9 +7,9 @@ if(MSVC)
   # https://docs.microsoft.com/en-us/cpp/build/reference/std-specify-language-standard-version
   # MSVC has c++14 enabled by default, no need to specify c++11
 else()
-  check_cxx_compiler_flag(-std=c++11 COMPILER_SUPPORTS_CXX11)
+  check_cxx_compiler_flag(-std=c++17 COMPILER_SUPPORTS_CXX11)
   if(COMPILER_SUPPORTS_CXX11)
-    add_compile_options(-std=c++11)
+    add_compile_options(-std=c++17)
   endif()
 endif()
=== ./src/kdl_parser/kdl_parser (git) ===
diff --git a/CMakeLists.txt b/CMakeLists.txt
index ee7779b..bef842b 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -2,7 +2,7 @@ cmake_minimum_required(VERSION 3.7.2)
 
 project(kdl_parser)
 
-set(CMAKE_CXX_STANDARD 14)
+set(CMAKE_CXX_STANDARD 17)
 set(CMAKE_CXX_STANDARD_REQUIRED ON)
 
 find_package(catkin QUIET
=== ./src/laser_filters (git) ===
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 34da690..553524a 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,7 +1,7 @@
 cmake_minimum_required(VERSION 3.0.2)
 project(laser_filters)
 
-set(CMAKE_CXX_STANDARD 11)
+set(CMAKE_CXX_STANDARD 17)
 
 ##############################################################################
 # Find dependencies
=== ./src/laser_geometry (git) ===
diff --git a/CMakeLists.txt b/CMakeLists.txt
index cdf46ae..4c01f9c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,7 +1,7 @@
 cmake_minimum_required(VERSION 3.0.2)
 project(laser_geometry)
 
-set(CMAKE_CXX_STANDARD 11)
+set(CMAKE_CXX_STANDARD 17)
 
 find_package(catkin REQUIRED
     COMPONENTS
=== ./src/perception_pcl/pcl_ros (git) ===
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 2466227d..b52588fd 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -5,9 +5,9 @@ project(pcl_ros)
 # Use CMake C++ standard management where possible for better interoperability
 # with dependencies that export target standards and/or features
 if (${CMAKE_VERSION} VERSION_LESS "3.1")
-  add_compile_options(-std=c++14)
+  add_compile_options(-std=c++17)
 else()
-  set(CMAKE_CXX_STANDARD 14)
+  set(CMAKE_CXX_STANDARD 17)
 endif()
 
 ## Find catkin packages
=== ./src/resource_retriever (git) ===
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 359c9e8..0cec769 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,7 +1,7 @@
 cmake_minimum_required(VERSION 3.0.2)
 project(resource_retriever)
 
-set_directory_properties(PROPERTIES COMPILE_OPTIONS "-std=c++11")
+set_directory_properties(PROPERTIES COMPILE_OPTIONS "-std=c++17")
 
 find_package(catkin REQUIRED COMPONENTS rosconsole roslib)
=== ./src/robot_state_publisher (git) ===
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 36bf399..5c5010d 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -15,9 +15,9 @@ if(MSVC)
   # MSVC does not support the Wextra flag
   add_compile_options(/Wall)
 else()
-  check_cxx_compiler_flag(-std=c++11 COMPILER_SUPPORTS_CXX11)
+  check_cxx_compiler_flag(-std=c++17 COMPILER_SUPPORTS_CXX11)
   if(COMPILER_SUPPORTS_CXX11)
-    add_compile_options(-std=c++11)
+    add_compile_options(-std=c++17)
   endif()
   add_compile_options(-Wall -Wextra)
 endif()
=== ./src/rosconsole (git) ===
diff --git a/src/rosconsole/impl/rosconsole_log4cxx.cpp b/src/rosconsole/impl/rosconsole_log4cxx.cpp
index 9018312..313fce0 100644
--- a/src/rosconsole/impl/rosconsole_log4cxx.cpp
+++ b/src/rosconsole/impl/rosconsole_log4cxx.cpp
@@ -166,7 +166,7 @@ void initialize()
   }
 
   log4cxx::LoggerPtr logger = log4cxx::Logger::getLogger(ROSCONSOLE_ROOT_LOGGER_NAME);
-  logger->addAppender(new ROSConsoleStdioAppender);
+  logger->addAppender(std::make_shared<ROSConsoleStdioAppender>());
 #ifdef _MSC_VER
   if ( ros_root_cstr != NULL ) {
 	  free(ros_root_cstr);
@@ -200,7 +200,7 @@ bool isEnabledFor(void* handle, ::ros::console::Level level)
 
 void* getHandle(const std::string& name)
 {
-  return log4cxx::Logger::getLogger(name);
+  return log4cxx::Logger::getLogger(name).get();
 }
 
 std::string getName(void* handle)
@@ -216,7 +216,7 @@ std::string getName(void* handle)
 
 bool get_loggers(std::map<std::string, levels::Level>& loggers)
 {
-  log4cxx::spi::LoggerRepositoryPtr repo = log4cxx::Logger::getLogger(ROSCONSOLE_ROOT_LOGGER_NAME)->getLoggerRepository();
+  log4cxx::spi::LoggerRepositoryPtr repo = log4cxx::Logger::getLogger(ROSCONSOLE_ROOT_LOGGER_NAME)->getLoggerRepository().lock();
 
   log4cxx::LoggerList current_loggers = repo->getCurrentLoggers();
   log4cxx::LoggerList::iterator it = current_loggers.begin();
@@ -352,11 +352,11 @@ protected:
   ros::console::LogAppender* appender_;
 };
 
-Log4cxxAppender* g_log4cxx_appender = 0;
+std::shared_ptr<Log4cxxAppender> g_log4cxx_appender;
 
 void register_appender(LogAppender* appender)
 {
-  g_log4cxx_appender = new Log4cxxAppender(appender);
+  g_log4cxx_appender = std::make_shared<Log4cxxAppender>(appender);
   const log4cxx::LoggerPtr& logger = log4cxx::Logger::getLogger(ROSCONSOLE_ROOT_LOGGER_NAME);
   logger->addAppender(g_log4cxx_appender);
 }
@@ -366,8 +366,7 @@ void deregister_appender(LogAppender* appender){
   {
     const log4cxx::LoggerPtr& logger = log4cxx::Logger::getLogger(ROSCONSOLE_ROOT_LOGGER_NAME);
     logger->removeAppender(g_log4cxx_appender);
-    delete g_log4cxx_appender;
-    g_log4cxx_appender = 0;
+    g_log4cxx_appender.reset();
   }
 }
 void shutdown()
@@ -376,14 +375,14 @@ void shutdown()
   {
     const log4cxx::LoggerPtr& logger = log4cxx::Logger::getLogger(ROSCONSOLE_ROOT_LOGGER_NAME);
     logger->removeAppender(g_log4cxx_appender);
-    g_log4cxx_appender = 0;
+    g_log4cxx_appender.reset();
   }
   // reset this so that the logger doesn't get crashily destroyed
   // again during global destruction.  
   //
   // See https://code.ros.org/trac/ros/ticket/3271
   //
-  log4cxx::Logger::getRootLogger()->getLoggerRepository()->shutdown();
+  log4cxx::Logger::getRootLogger()->getLoggerRepository().lock()->shutdown();
 }
 
 } // namespace impl
=== ./src/roscpp_core/rostime (git) ===
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 32a76bb9..52282463 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -38,7 +38,7 @@ if(CATKIN_ENABLE_TESTING)
   endif()
   catkin_add_gtest(${PROJECT_NAME}-test_time test/time.cpp)
   if(TARGET ${PROJECT_NAME}-test_time)
-    set_property(TARGET ${PROJECT_NAME}-test_time APPEND_STRING PROPERTY COMPILE_FLAGS "-std=c++11")
+    set_property(TARGET ${PROJECT_NAME}-test_time APPEND_STRING PROPERTY COMPILE_FLAGS "-std=c++17")
     target_link_libraries(${PROJECT_NAME}-test_time ${catkin_LIBRARIES} rostime)
   endif()
 endif()
=== ./src/rqt_image_view (git) ===
diff --git a/CMakeLists.txt b/CMakeLists.txt
index ba4ec83..8fd46ff 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -2,7 +2,7 @@ cmake_minimum_required(VERSION 3.0.2)
 
 project(rqt_image_view)
 
-add_compile_options(-std=c++11)
+add_compile_options(-std=c++17)
 
 # Load catkin and all dependencies required for this package
 find_package(catkin REQUIRED COMPONENTS rqt_gui rqt_gui_cpp image_transport sensor_msgs geometry_msgs cv_bridge)
=== ./src/urdf/urdf (git) ===
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 2741c61..d9acc12 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -22,7 +22,7 @@ set(generated_compat_header "${CATKIN_DEVEL_PREFIX}/include/${PROJECT_NAME}/urdf
 include_directories("${CATKIN_DEVEL_PREFIX}/include")
 configure_file(urdfdom_compatibility.h.in "${generated_compat_header}" @ONLY)
 
-set(CMAKE_CXX_STANDARD 14)
+set(CMAKE_CXX_STANDARD 17)
 set(CMAKE_CXX_STANDARD_REQUIRED ON)
 
 catkin_package(
